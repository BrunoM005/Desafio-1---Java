public class ListaDuplamenteEncadeada {

    // Classe do nó (representa um elemento da lista)
    static class No {
        int valor;     // Valor armazenado no nó
        No proximo;    // Referência para o próximo nó
        No anterior;   // Referência para o nó anterior

        // Construtor do nó, inicializa com o valor e os ponteiros para próximo e anterior como null
        No(int valor) {
            this.valor = valor;
            this.proximo = null;
            this.anterior = null;
        }
    }

    // Classe da lista duplamente encadeada
    static class Lista {
        No cabeca; // Nó cabeçalho (nó fictício que serve como ponto de referência)

        // Construtor da lista (inicializa a lista com um nó cabeça)
        Lista() {
            cabeca = new No(0);  // Criação do nó cabeça com valor 0 (ou qualquer valor que você escolher)
            cabeca.proximo = cabeca;  // O nó cabeça aponta para ele mesmo (nó cabeça é circular)
            cabeca.anterior = cabeca;  // O nó cabeça também aponta para ele mesmo (como anterior)
        }

        // Método para inserir um valor no final da lista
        public void inserirFinal(int valor) {
            No novo = new No(valor);  // Cria um novo nó com o valor fornecido
            No ultimo = cabeca.anterior;  // O último nó é sempre o nó anterior ao nó cabeça

            // Ajustando os ponteiros para inserir o novo nó no final
            ultimo.proximo = novo;  // O último nó agora aponta para o novo nó
            novo.anterior = ultimo;  // O novo nó aponta para o último nó
            novo.proximo = cabeca;  // O novo nó aponta para o nó cabeça (final da lista)
            cabeca.anterior = novo;  // O nó cabeça agora aponta para o novo nó (o novo último nó)
        }

        // Método para exibir os elementos da lista da cabeça para o final
        public void exibir() {
            No atual = cabeca.proximo;  // Começa com o nó imediatamente após o nó cabeça
            while (atual != cabeca) {  // Continua até encontrar o nó cabeça novamente
                System.out.print(atual.valor + " ");  // Exibe o valor do nó atual
                atual = atual.proximo;  // Move para o próximo nó
            }
            System.out.println();  // Pula para a próxima linha após exibir todos os elementos
        }

        // Método para exibir os elementos da lista do final para a cabeça
        public void exibirReverso() {
            No atual = cabeca.anterior;  // Começa com o nó imediatamente antes do nó cabeça
            while (atual != cabeca) {  // Continua até encontrar o nó cabeça novamente
                System.out.print(atual.valor + " ");  // Exibe o valor do nó atual
                atual = atual.anterior;  // Move para o nó anterior
            }
            System.out.println();  // Pula para a próxima linha após exibir todos os elementos
        }
    }

    public static void main(String[] args) {
        // Criando uma lista duplamente encadeada
        Lista lista = new Lista();

        // Inserindo elementos no final da lista
        lista.inserirFinal(1);
        lista.inserirFinal(2);
        lista.inserirFinal(3);
        lista.inserirFinal(4);

        // Exibindo a lista da cabeça para o final
        System.out.print("Lista da cabeça para o final: ");
        lista.exibir();  // Esperado: 1 2 3 4

        // Exibindo a lista do final para a cabeça
        System.out.print("Lista do final para a cabeça: ");
        lista.exibirReverso();  // Esperado: 4 3 2 1
    }
}

