public class ListaDuplamenteEncadeada {

    // Classe do nó (representa um item da lista)
    static class No {
        int valor;     // Valor armazenado no nó
        No proximo;    // Ponteiro para o próximo nó
        No anterior;   // Ponteiro para o nó anterior

        // Construtor do nó, inicializa com o valor e os ponteiros como null
        No(int valor) {
            this.valor = valor;
            this.proximo = null;
            this.anterior = null;
        }
    }

    // Classe da lista duplamente encadeada
    static class Lista {
        No cabeca; // Nó cabeçalho (nó fictício que serve como ponto de referência)

        // Construtor da lista (inicializa a lista com um nó cabeça)
        Lista() {
            cabeca = new No(0);  // Criação do nó cabeça com valor 0 (ou qualquer valor que você escolher)
            cabeca.proximo = cabeca;  // O nó cabeça aponta para ele mesmo, formando uma lista circular
            cabeca.anterior = cabeca;  // O nó cabeça também aponta para ele mesmo como o nó anterior
        }

        // Método para inserir um valor no final da lista
        public void inserirFinal(int valor) {
            No novo = new No(valor);  // Criação de um novo nó com o valor fornecido
            No ultimo = cabeca.anterior;  // O último nó é sempre o nó anterior ao nó cabeça

            // Ajustando os ponteiros para inserir o novo nó no final
            ultimo.proximo = novo;  // O último nó aponta para o novo nó
            novo.anterior = ultimo;  // O novo nó aponta para o último nó
            novo.proximo = cabeca;  // O novo nó aponta para o nó cabeça, fechando o ciclo
            cabeca.anterior = novo;  // O nó cabeça aponta para o novo nó, tornando-o o novo último nó
        }

        // Função que localiza o P-ésimo elemento na lista
        public No Locate(int P) {
            No atual = cabeca.proximo;  // Começa no primeiro nó após o nó cabeça
            int i = 1;  // A contagem começa a partir de 1 (posição 1 é o primeiro item)

            while (atual != cabeca) {  // Percorre até encontrar o nó cabeça
                if (i == P) {
                    return atual;  // Se a posição P for encontrada, retorna o nó da posição P
                }
                i++;  // Incrementa o contador de posição
                atual = atual.proximo;  // Move para o próximo nó
            }
            
            return null;  // Retorna null se não encontrar a posição P
        }

        // Exibe os elementos da lista da cabeça para o final
        public void exibir() {
            No atual = cabeca.proximo;  // Começa no primeiro nó após o nó cabeça
            while (atual != cabeca) {  // Continua até o nó cabeça
                System.out.print(atual.valor + " ");  // Exibe o valor do nó atual
                atual = atual.proximo;  // Move para o próximo nó
            }
            System.out.println();  // Pula para a próxima linha após exibir todos os elementos
        }

        // Exibe os elementos da lista do final para a cabeça
        public void exibirReverso() {
            No atual = cabeca.anterior;  // Começa no último nó (o nó anterior ao nó cabeça)
            while (atual != cabeca) {  // Continua até o nó cabeça
                System.out.print(atual.valor + " ");  // Exibe o valor do nó atual
                atual = atual.anterior;  // Move para o nó anterior
            }
            System.out.println();  // Pula para a próxima linha após exibir todos os elementos
        }
    }

    public static void main(String[] args) {
        // Criando uma lista duplamente encadeada
        Lista lista = new Lista();

        // Inserindo elementos no final da lista
        lista.inserirFinal(10);
        lista.inserirFinal(20);
        lista.inserirFinal(30);
        lista.inserirFinal(40);

        // Exibindo a lista
        System.out.print("Lista: ");
        lista.exibir();  // Esperado: 10 20 30 40

        // Testando a função Locate para localizar o 3º elemento
        int posicao = 3;
        No item = lista.Locate(posicao);
        if (item != null) {
            System.out.println("Elemento na posição " + posicao + ": " + item.valor);  // Esperado: 30
        } else {
            System.out.println("Posição " + posicao + " não encontrada.");
        }
    }
}
