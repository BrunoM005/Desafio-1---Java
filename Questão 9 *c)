public class ListaDuplamenteEncadeada {

    // Classe do nó (representa um item da lista)
    static class No {
        int valor;
        No proximo;
        No anterior;

        No(int valor) {
            this.valor = valor;
            this.proximo = null;
            this.anterior = null;
        }
    }

    // Classe da lista duplamente encadeada
    static class Lista {
        No cabeca; // Nó cabeçalho (nó fictício)

        // Construtor da lista (inicializa a lista com um nó cabeça)
        Lista() {
            cabeca = new No(0);  // Nó cabeça com valor 0 (ou qualquer valor que você escolher)
            cabeca.proximo = cabeca; // O nó cabeça aponta para ele mesmo
            cabeca.anterior = cabeca; // O nó cabeça aponta para ele mesmo
        }

        // Insere um valor no final da lista
        public void inserirFinal(int valor) {
            No novo = new No(valor);
            No ultimo = cabeca.anterior;  // O último nó é sempre o nó anterior ao nó cabeça

            // Ajustando os ponteiros
            ultimo.proximo = novo;
            novo.anterior = ultimo;
            novo.proximo = cabeca;  // O novo nó aponta para o nó cabeça
            cabeca.anterior = novo;  // O nó cabeça aponta para o novo nó
        }

        // Função que localiza o P-ésimo elemento na lista
        public No Locate(int P) {
            No atual = cabeca.proximo;  // Começa no primeiro nó após o cabeçalho
            int i = 1;  // A contagem começa a partir de 1 (posição 1 é o primeiro item)

            while (atual != cabeca) {  // Percorre até o nó cabeça
                if (i == P) {
                    return atual;  // Retorna o ponteiro para o nó da posição P
                }
                i++;
                atual = atual.proximo;
            }

            return null;  // Retorna NULL se não encontrar a posição P
        }

        // Função que insere um item na posição P
        public void InsereP(int E, int P) {
            // Localiza o nó na posição P
            No posicaoP = Locate(P);

            if (posicaoP == null) {
                System.out.println("Erro: A lista tem menos de " + P + " elementos.");
                return;  // Retorna erro se a posição P não for válida
            }

            // Cria o novo nó que será inserido
            No novo = new No(E);

            // Ajustando os ponteiros para inserir o novo nó
            No anterior = posicaoP.anterior; // O nó anterior ao nó da posição P

            // O novo nó vai apontar para o nó da posição P
            novo.proximo = posicaoP;
            posicaoP.anterior = novo;

            // O nó anterior ao da posição P vai apontar para o novo nó
            anterior.proximo = novo;
            novo.anterior = anterior;

            System.out.println("Elemento " + E + " inserido na posição " + P);
        }

        // Exibe os elementos da lista da cabeça para o final
        public void exibir() {
            No atual = cabeca.proximo;
            while (atual != cabeca) {
                System.out.print(atual.valor + " ");
                atual = atual.proximo;
            }
            System.out.println();
        }

        // Exibe os elementos da lista do final para a cabeça
        public void exibirReverso() {
            No atual = cabeca.anterior;
            while (atual != cabeca) {
                System.out.print(atual.valor + " ");
                atual = atual.anterior;
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        // Criando uma lista duplamente encadeada
        Lista lista = new Lista();

        // Inserindo elementos
        lista.inserirFinal(10);
        lista.inserirFinal(20);
        lista.inserirFinal(30);
        lista.inserirFinal(40);

        // Exibindo a lista
        System.out.print("Lista: ");
        lista.exibir();

        // Inserindo elemento na posição 3
        lista.InsereP(25, 3);  // Insere o elemento 25 na posição 3
        System.out.print("Lista após inserção: ");
        lista.exibir();

        // Tentando inserir em uma posição inválida (5)
        lista.InsereP(50, 5);  // Tentativa de inserção na posição 5 (erro)
    }
}
