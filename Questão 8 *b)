public class IntersecaoListas {

    // Classe que representa um nó na lista encadeada
    static class No {
        int valor;       // Valor armazenado no nó
        No proximo;      // Referência para o próximo nó (ou null se for o último)

        // Construtor que inicializa o nó com um valor e o próximo nó como null
        No(int valor) {
            this.valor = valor;
            this.proximo = null;
        }
    }

    // Classe que representa uma lista encadeada
    static class ListaEncadeada {
        No inicio;  // Referência para o início da lista

        // Método que insere um valor na lista, garantindo que não haja repetição
        public void inserir(int valor) {
            if (!contem(valor)) {  // Verifica se o valor já está na lista
                No novo = new No(valor);  // Cria um novo nó com o valor
                if (inicio == null) {  // Se a lista estiver vazia
                    inicio = novo;  // O novo nó será o início da lista
                } else {  // Se a lista já tiver elementos
                    No atual = inicio;
                    while (atual.proximo != null) {  // Encontra o último nó
                        atual = atual.proximo;
                    }
                    atual.proximo = novo;  // Insere o novo nó no final da lista
                }
            }
        }

        // Método que verifica se um valor já existe na lista
        public boolean contem(int valor) {
            No atual = inicio;
            while (atual != null) {  // Percorre todos os nós da lista
                if (atual.valor == valor) {  // Se o valor for encontrado
                    return true;  // Retorna true
                }
                atual = atual.proximo;  // Move para o próximo nó
            }
            return false;  // Se o valor não for encontrado, retorna false
        }

        // Método que exibe os valores de todos os nós na lista
        public void exibir() {
            No atual = inicio;
            while (atual != null) {  // Percorre todos os nós da lista
                System.out.print(atual.valor + " ");  // Exibe o valor do nó atual
                atual = atual.proximo;  // Move para o próximo nó
            }
            System.out.println();  // Pula para a próxima linha após exibir todos os valores
        }
    }

    public static void main(String[] args) {
        // Criação de três listas encadeadas
        ListaEncadeada L1 = new ListaEncadeada();
        ListaEncadeada L2 = new ListaEncadeada();
        ListaEncadeada L4 = new ListaEncadeada();  // Lista para armazenar a interseção

        // Inserindo valores nas listas L1 e L2
        L1.inserir(1);
        L1.inserir(2);
        L1.inserir(3);
        L1.inserir(6);

        L2.inserir(3);
        L2.inserir(4);
        L2.inserir(5);
        L2.inserir(6);

        // Percorrendo os elementos de L1 e verificando se estão em L2
        No atualL1 = L1.inicio;
        while (atualL1 != null) {
            // Se o valor do nó de L1 também estiver em L2, adiciona-o à L4
            if (L2.contem(atualL1.valor)) {
                L4.inserir(atualL1.valor);  // Adiciona o valor à lista L4 (interseção)
            }
            atualL1 = atualL1.proximo;  // Move para o próximo nó de L1
        }

        // Exibindo a interseção (valores comuns entre L1 e L2)
        System.out.print("L4 (interseção de L1 e L2): ");
        L4.exibir();  // Esperado: 3 6
    }
}

